Search.setIndex({"docnames": ["API_docs", "documentation_pages/base", "documentation_pages/cli", "documentation_pages/compute", "documentation_pages/interface", "documentation_pages/models", "documentation_pages/security", "documentation_pages/settings", "documentation_pages/storage", "documentation_pages/strategies", "documentation_pages/strategist", "index", "overview"], "filenames": ["API_docs.rst", "documentation_pages/base.rst", "documentation_pages/cli.rst", "documentation_pages/compute.rst", "documentation_pages/interface.rst", "documentation_pages/models.rst", "documentation_pages/security.rst", "documentation_pages/settings.rst", "documentation_pages/storage.rst", "documentation_pages/strategies.rst", "documentation_pages/strategist.rst", "index.rst", "overview.rst"], "titles": ["API Documentation", "Reusable components for API services. \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.base.api</span></code>", "Command line interface \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.cli</span></code>", "AlchemiscaleComputeAPI \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.compute.api</span></code>", "AlchemiscaleClientAPI \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.interface.api</span></code>", "Data models \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.models</span></code>", "Security components for APIs. \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.security.auth</span></code>", "Settings \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.settings</span></code>", "Data models for storage components \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.storage.models</span></code>", "Alchemical strategy base class. \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.strategies.base</span></code>", "Strategist service. \u2014 <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">alchemiscale.strategist.service</span></code>", "Welcome to alchemiscale\u2019s documentation!", "Overview"], "terms": {"reusabl": 0, "compon": 0, "servic": [0, 4, 8], "alchemiscal": 0, "base": [0, 3, 4, 5, 6, 7, 8], "gziprequest": [0, 1], "querygufehandl": [0, 1], "minimize_scope_spac": [0, 1], "validate_scop": [0, 1], "validate_scopes_queri": [0, 1], "class": [0, 3, 4, 5, 7, 8], "client": 0, "alchemiscalebasecli": [0, 1, 3, 4], "alchemiscalebaseclienterror": [0, 1, 3, 4], "alchemiscaleconnectionerror": [0, 1], "alchemiscalecomputeapi": 0, "comput": [0, 8, 11], "interact": 0, "alchemiscalecomputecli": [0, 3], "alchemiscalecomputeclienterror": [0, 3], "alchemiscalecomputeservic": [0, 8], "asynchronouscomputeservic": [0, 3], "interruptablesleep": [0, 3], "sleepinterrupt": [0, 3], "synchronouscomputeservic": [0, 3], "alchemiscaleclientapi": 0, "interfac": 0, "user": [0, 8], "face": 0, "alchemiscalecli": [0, 4], "alchemiscaleclienterror": [0, 4], "secur": [0, 8], "auth": 0, "authenticationerror": [0, 6], "data": [0, 1], "model": [0, 1], "storag": 0, "computeserviceid": [0, 3, 8], "computeserviceregistr": [0, 8], "objectstoreref": [0, 8], "protocoldagresultref": [0, 3, 8], "task": [0, 3, 4, 8], "taskarch": [0, 8], "taskhub": [0, 3, 4, 8, 10], "taskstatusenum": [0, 4, 8], "s3": [0, 7], "object": [0, 1, 2, 3, 4, 5, 7], "objectstor": 0, "s3objectstor": [0, 7, 8], "s3objectstoreerror": [0, 8], "get_s3o": [0, 8], "node4j": 0, "state": [0, 5], "statestor": 0, "alchemiscalestatestor": [0, 8], "neo4jstoreerror": [0, 8], "neo4jstor": [0, 8], "get_n4j": [0, 8], "alchem": 0, "strategi": [0, 4, 8, 10], "strategist": 0, "command": 0, "line": 0, "cli": 0, "envvar_dictifi": [0, 2], "get_settings_from_opt": [0, 2], "invalidscopeerror": [0, 5], "scopedkei": [0, 3, 4, 5, 8], "set": [0, 2, 3, 4, 8], "apiset": [0, 7], "baseapiset": [0, 7], "computeapiset": [0, 7], "frozenset": [0, 7], "jwtset": [0, 7], "neo4jstoreset": [0, 7, 8], "s3objectstoreset": [0, 7, 8], "scope": [1, 3, 4, 5, 8], "type": [1, 4, 8], "mutablemap": 1, "str": [1, 3, 4, 5, 7, 8], "ani": [1, 4, 8, 11], "receiv": [1, 8], "callabl": 1, "await": 1, "function": [1, 3, 8], "empty_rec": 1, "send": 1, "none": [1, 2, 3, 4, 7, 8], "empty_send": 1, "request": [1, 4], "return_guf": [1, 3, 4, 8], "bool": [1, 3, 4, 8], "helper": 1, "provid": [1, 8], "singl": [1, 4, 8], "dispatch": 1, "like": [1, 3], "handl": [1, 3], "queri": [1, 4, 8], "oper": 1, "sinc": [1, 8], "thei": [1, 2, 7], "can": [1, 3, 4, 8], "return": [1, 2, 3, 4, 8], "list": [1, 3, 4, 7, 8], "dict": [1, 2, 3, 4, 8], "remov": [1, 4, 8], "redund": 1, "from": [1, 2, 3, 4, 7, 8], "token": 1, "tokendata": 1, "verifi": [1, 3, 4], "ha": [1, 2, 3, 4, 8], "specifi": [1, 3, 4, 8], "encod": 1, "directli": [1, 8], "i": [1, 2, 3, 4, 8, 11, 12], "access": [1, 4, 7, 8], "via": [1, 4, 8], "hierarchi": 1, "query_scop": 1, "as_str": 1, "fals": [1, 3, 4, 8], "creat": [1, 2, 4, 8], "intersect": 1, "where": [1, 7, 8], "mai": [1, 8], "includ": [1, 4, 8], "all": [1, 2, 3, 4, 8], "wildcard": [1, 4, 5], "No": 1, "outsid": 1, "those": [1, 4, 8], "If": [1, 3, 4, 7, 8], "true": [1, 3, 4, 8], "rather": 1, "than": [1, 8], "api_url": [1, 3, 4], "identifi": [1, 3, 4, 5, 8], "kei": [1, 3, 4, 8], "max_retri": [1, 3, 4], "int": [1, 3, 4, 7, 8], "5": [1, 3, 4], "retry_base_second": [1, 3, 4], "float": [1, 3, 4, 8], "2": [1, 3, 4], "0": [1, 3, 4, 7, 8], "retry_max_second": [1, 3, 4], "60": [1, 3, 4], "except": [1, 3, 4, 5, 6, 8], "arg": [1, 3, 4, 8, 9], "kwarg": [1, 2, 3, 4, 8, 9], "ctx": 2, "param": 2, "valu": [2, 4, 8], "callback": 2, "": [2, 3, 4, 8, 10], "envvar": 2, "thi": [2, 3, 4, 5, 8, 11, 12], "ensur": [2, 8], "name": [2, 3, 4, 8], "onli": [2, 4, 8], "enter": 2, "string": 2, "onc": [2, 4], "within": [2, 4, 8], "click": 2, "system": 2, "It": [2, 4, 11], "requir": [2, 8], "paramet": [2, 3, 4, 8], "attach": 2, "defin": 2, "its": [2, 4, 8], "settings_cl": 2, "first": [2, 3], "strip": 2, "item": [2, 8], "which": [2, 4, 8], "default": [2, 4], "so": [2, 3], "don": [2, 7], "t": [2, 4, 7, 8], "overrid": 2, "claim_taskhub_task": [3, 8], "compute_service_id": [3, 8], "count": [3, 4, 8], "1": [3, 4, 7, 8], "claim": [3, 8], "query_taskhub": [3, 8], "correspond": [3, 4, 8], "given": [3, 4, 8], "asynchron": 3, "us": [3, 4, 7, 8, 11], "product": [3, 11], "case": [3, 7], "though": 3, "doe": [3, 4, 8], "make": 3, "fold": [3, 11], "home": [3, 11], "start": [3, 4, 8], "keep": 3, "go": 3, "until": [3, 8], "told": 3, "stop": 3, "A": [3, 4, 8], "sleep": 3, "interrupt": 3, "thread": 3, "event": 3, "wake": 3, "up": 3, "befor": [3, 4, 8], "entir": 3, "durat": 3, "run": [3, 8, 11], "an": [3, 4, 7, 8, 12], "rais": [3, 8], "functor": 3, "instanc": [3, 8], "pass": 3, "delai": 3, "python": 3, "sched": 3, "schedul": 3, "baseexcept": 3, "signal": 3, "wa": [3, 8], "keyboardinterrupt": 3, "deriv": 3, "prevent": 3, "being": 3, "shared_basedir": 3, "pathlik": [3, 7], "scratch_basedir": 3, "keep_shar": 3, "keep_scratch": 3, "sleep_interv": 3, "30": 3, "heartbeat_interv": 3, "300": 3, "claim_limit": 3, "loglevel": 3, "warn": 3, "logfil": 3, "path": [3, 8], "client_max_retri": 3, "client_retry_base_second": 3, "client_retry_max_second": 3, "client_verifi": 3, "fulli": [3, 4], "synchron": 3, "intend": [3, 8], "refer": [3, 8], "implement": 3, "test": 3, "debug": 3, "protocol": [3, 4, 8], "beat": 3, "deliv": 3, "heartbeat": [3, 8], "indic": [3, 4, 8], "still": 3, "aliv": 3, "claim_task": 3, "get": [3, 4, 8], "execut": [3, 4, 8], "avail": [3, 4, 8], "match": [3, 7, 8], "configur": 3, "follow": [3, 8], "push": [3, 8], "databas": [3, 4, 8], "self": 3, "max_task": 3, "max_tim": 3, "limit": 3, "maximum": [3, 11], "number": [3, 4, 8], "second": 3, "The": [3, 4, 8], "hit": 3, "trigger": 3, "exit": 3, "max": [3, 4], "have": [3, 8], "time": [3, 4, 11], "task_to_protocoldag": 3, "tupl": [3, 7, 8], "protocoldag": [3, 8], "transform": [3, 4, 8], "protocoldagresult": [3, 4, 8], "produc": 3, "also": [3, 4, 8], "give": [3, 4, 8], "extend": [3, 4, 8], "anoth": [3, 4, 8], "other": [3, 4, 5, 7, 8], "otherwis": [3, 8], "action_task": [4, 8], "network": [4, 8], "action": [4, 8], "alchemicalnetwork": [4, 8, 10], "cannot": [4, 5, 8], "differ": 4, "complet": [4, 8], "ad": [4, 8], "associ": [4, 8], "same": [4, 8], "order": [4, 8], "input": [4, 8], "couldn": 4, "place": [4, 8], "option": [4, 8], "cancel_task": [4, 8], "cancel": 4, "present": [4, 8], "check_exist": 4, "scoped_kei": 4, "repres": [4, 8], "create_network": [4, 8], "compress": 4, "submit": 4, "specif": [4, 5], "must": [4, 5, 8], "contain": [4, 5, 7], "side": 4, "ship": 4, "reduc": 4, "submiss": 4, "depend": 4, "bandwidth": 4, "your": 4, "connect": 4, "without": [4, 8], "perform": [4, 8], "optim": 4, "bear": 4, "result": [4, 8], "method": [4, 8], "call": [4, 8], "integ": 4, "between": [4, 8], "9": 4, "finer": 4, "control": 4, "over": [4, 8], "degre": 4, "mean": 4, "synonym": 4, "level": 4, "create_task": [4, 8], "point": [4, 8], "new": [4, 8], "get_chemicalsystem": 4, "chemicalsystem": [4, 8], "visual": 4, "retriev": [4, 8], "server": 4, "show": 4, "progress": 4, "get_chemicalsystem_network": [4, 8], "get_chemicalsystem_transform": [4, 8], "get_network": 4, "get_network_chemicalsystem": [4, 8], "get_network_statu": [4, 8], "statu": [4, 8], "obtain": 4, "print": 4, "tabl": 4, "status": [4, 8], "status_count": 4, "get_network_task": [4, 8], "get_network_transform": [4, 8], "get_scope_statu": [4, 8], "non": 4, "ar": [4, 8], "allow": 4, "back": 4, "get_scoped_kei": 4, "obj": 4, "gufetokeniz": [4, 5, 8, 9], "gufe": [4, 8], "check": [4, 8], "conveni": [4, 8], "properli": 4, "construct": 4, "get_task_failur": 4, "fail": [4, 8], "failur": 4, "them": 4, "get_task_network": [4, 8], "get_task_result": 4, "success": 4, "get_task_transform": [4, 8], "get_tasks_statu": 4, "batch_siz": 4, "1000": 4, "multipl": 4, "tune": 4, "speed": 4, "when": 4, "mani": [4, 8], "each": [4, 8], "doesn": [4, 8], "exist": [4, 8], "get_transform": 4, "get_transformation_chemicalsystem": [4, 8], "get_transformation_failur": 4, "get_transformation_network": [4, 8], "get_transformation_result": 4, "return_protocoldagresult": 4, "protocolresult": 4, "themselv": 4, "instead": [4, 7, 8], "raw": 4, "process": [4, 8], "get_transformation_statu": [4, 8], "get_transformation_task": [4, 8], "return_a": [4, 8], "digraph": 4, "recurs": 4, "keyword": 4, "argument": [4, 8], "amount": 4, "choos": 4, "tree": 4, "graph": [4, 8], "particular": 4, "networkx": 4, "direct": 4, "edg": 4, "query_chemicalsystem": [4, 8], "query_network": [4, 8], "query_task": [4, 8], "query_transform": [4, 8], "set_strategi": [4, 8], "evalu": 4, "appli": [4, 10], "set_tasks_statu": 4, "one": [4, 8], "wait": [4, 8], "current": 4, "error": [4, 8], "invalid": [4, 8], "delet": [4, 8], "were": 4, "updat": [4, 8], "valueerror": [5, 8], "gufe_kei": 5, "gufekei": 5, "org": 5, "campaign": [5, 11], "project": 5, "basemodel": [5, 8], "uniqu": [5, 8], "store": [5, 8], "For": 5, "In": 5, "word": 5, "_env_fil": 7, "_env_file_encod": 7, "_env_nested_delimit": 7, "_secrets_dir": 7, "jwt_secret_kei": 7, "jwt_expire_second": 7, "1800": 7, "jwt_algorithm": 7, "hs256": 7, "aws_access_key_id": 7, "aws_secret_access_kei": 7, "aws_session_token": 7, "aws_s3_bucket": 7, "aws_s3_prefix": 7, "aws_default_region": 7, "neo4j_url": 7, "neo4j_dbnam": 7, "neo4j": [7, 8], "neo4j_us": 7, "neo4j_pass": 7, "alchemiscale_api_host": 7, "127": 7, "alchemiscale_api_port": 7, "80": 7, "alchemiscale_api_loglevel": 7, "info": 7, "automat": 7, "popul": [7, 10], "environ": 7, "variabl": 7, "insensit": 7, "alchemiscale_compute_api_host": 7, "alchemiscale_compute_api_port": 7, "alchemiscale_compute_api_loglevel": 7, "alchemiscale_compute_api_registration_expire_second": 7, "baseset": 7, "deploi": 7, "api": [7, 11], "ec2": 7, "host": 7, "role": 7, "resourc": 7, "e": 7, "g": 7, "ec": 7, "reli": 7, "iam": 7, "grant": 7, "regist": 8, "datetim": 8, "registr": 8, "gener": 8, "node": 8, "prioriti": 8, "highest": 8, "larger": 8, "lower": 8, "datetime_cr": 8, "constraint": 8, "weight": 8, "alloc": 8, "attent": 8, "rel": 8, "computeservic": 8, "equal": 8, "greater": 8, "more": 8, "effect": 8, "disabl": 8, "enum": 8, "enumer": 8, "session": 8, "boto3": 8, "bucket": 8, "prefix": 8, "endpoint_url": 8, "aw": 8, "consist": 8, "initi": 8, "iter_cont": 8, "iter": 8, "label": 8, "content": 8, "metadata": 8, "pull_protocoldagresult": 8, "ok": 8, "pull": 8, "json": 8, "form": 8, "avoid": 8, "unnecessari": 8, "deseri": 8, "desir": 8, "push_protocoldagresult": 8, "creator": 8, "under": [8, 11], "serial": 8, "reset": 8, "itself": 8, "abc": 8, "py2neo": 8, "add": 8, "note": 8, "add_scop": 8, "cl": 8, "credentialedent": 8, "entiti": 8, "Will": 8, "accord": 8, "select": 8, "consider": 8, "relationship": 8, "incomplet": 8, "drop": 8, "Of": 8, "remain": 8, "stochast": 8, "repeat": 8, "been": 8, "transact": 8, "create_credentialed_ent": 8, "credenti": 8, "ident": 8, "alreadi": 8, "overwrit": 8, "properti": 8, "target": 8, "even": 8, "some": 8, "ignor": 8, "eventu": 8, "create_taskhub": 8, "either": 8, "wai": 8, "delete_network": 8, "delete_task": 8, "part": 8, "administr": 8, "should": 8, "retain": 8, "delete_taskhub": 8, "deregister_computeservic": 8, "wil": 8, "expire_registr": 8, "expire_tim": 8, "last": 8, "prior": 8, "get_credentialed_ent": 8, "get_task_statu": 8, "dictionari": 8, "actual": 8, "get_task_weight": 8, "get_taskhub": 8, "get_taskhub_task": 8, "get_taskhub_unclaimed_task": 8, "unclaim": 8, "take": 8, "yield": 8, "map": 8, "heartbeat_computeservic": 8, "structur": 8, "list_credentialed_ent": 8, "list_scop": 8, "attribut": 8, "criteria": 8, "register_computeservic": 8, "compute_service_registr": 8, "collis": 8, "remove_credentialed_ident": 8, "remove_scop": 8, "undo": 8, "set_task_complet": 8, "raise_error": 8, "set_task_delet": 8, "chang": [8, 11], "set_task_error": 8, "set_task_invalid": 8, "set_task_result": 8, "set_task_run": 8, "set_task_statu": 8, "master": 8, "appropri": 8, "could": 8, "set_task_wait": 8, "set_task_weight": 8, "probabilist": 8, "concept": [8, 12], "orthogon": 8, "higher": 8, "distribut": [8, 11], "scalar": 8, "pair": 8, "after": 8, "union": 8, "whose": 8, "becaus": 8, "set_taskhub_weight": 8, "set_task": 8, "fix": 8, "against": 8, "total": 8, "readonli": 8, "ignore_except": 8, "context": 8, "manag": 8, "packag": 11, "larg": 11, "scale": 11, "free": 11, "energi": 11, "fah": [11, 12], "platform": 11, "design": 11, "interoper": 11, "open": 11, "molecular": 11, "softwar": 11, "foundat": 11, "stack": 11, "built": 11, "top": 11, "openmm": 11, "openforcefield": 11, "openfreeenergi": 11, "pre": 11, "alpha": 11, "activ": 11, "develop": 11, "yet": 11, "readi": 11, "liabl": 11, "rapidli": 11, "overview": 11, "index": 11, "modul": 11, "search": 11, "page": 11, "alchemi": 12}, "objects": {"alchemiscale.base": [[1, 0, 0, "-", "api"], [1, 0, 0, "-", "client"]], "alchemiscale.base.api": [[1, 1, 1, "", "GzipRequest"], [1, 1, 1, "", "QueryGUFEHandler"], [1, 2, 1, "", "minimize_scope_space"], [1, 2, 1, "", "validate_scopes"], [1, 2, 1, "", "validate_scopes_query"]], "alchemiscale.base.client": [[1, 1, 1, "", "AlchemiscaleBaseClient"], [1, 3, 1, "", "AlchemiscaleBaseClientError"], [1, 3, 1, "", "AlchemiscaleConnectionError"]], "alchemiscale": [[2, 0, 0, "-", "cli"], [5, 0, 0, "-", "models"], [7, 0, 0, "-", "settings"]], "alchemiscale.cli": [[2, 2, 1, "", "envvar_dictify"], [2, 2, 1, "", "get_settings_from_options"]], "alchemiscale.compute": [[3, 0, 0, "-", "api"], [3, 0, 0, "-", "client"], [3, 0, 0, "-", "service"]], "alchemiscale.compute.client": [[3, 1, 1, "", "AlchemiscaleComputeClient"], [3, 3, 1, "", "AlchemiscaleComputeClientError"]], "alchemiscale.compute.client.AlchemiscaleComputeClient": [[3, 4, 1, "", "claim_taskhub_tasks"], [3, 4, 1, "", "query_taskhubs"]], "alchemiscale.compute.service": [[3, 1, 1, "", "AsynchronousComputeService"], [3, 1, 1, "", "InterruptableSleep"], [3, 3, 1, "", "SleepInterrupted"], [3, 1, 1, "", "SynchronousComputeService"]], "alchemiscale.compute.service.AsynchronousComputeService": [[3, 4, 1, "", "start"]], "alchemiscale.compute.service.SynchronousComputeService": [[3, 4, 1, "", "beat"], [3, 4, 1, "", "claim_tasks"], [3, 4, 1, "", "execute"], [3, 4, 1, "", "heartbeat"], [3, 4, 1, "", "start"], [3, 4, 1, "", "task_to_protocoldag"]], "alchemiscale.interface": [[4, 0, 0, "-", "api"], [4, 0, 0, "-", "client"]], "alchemiscale.interface.client": [[4, 1, 1, "", "AlchemiscaleClient"], [4, 3, 1, "", "AlchemiscaleClientError"]], "alchemiscale.interface.client.AlchemiscaleClient": [[4, 4, 1, "", "action_tasks"], [4, 4, 1, "", "cancel_tasks"], [4, 4, 1, "", "check_exists"], [4, 4, 1, "", "create_network"], [4, 4, 1, "", "create_tasks"], [4, 4, 1, "", "get_chemicalsystem"], [4, 4, 1, "", "get_chemicalsystem_networks"], [4, 4, 1, "", "get_chemicalsystem_transformations"], [4, 4, 1, "", "get_network"], [4, 4, 1, "", "get_network_chemicalsystems"], [4, 4, 1, "", "get_network_status"], [4, 4, 1, "", "get_network_tasks"], [4, 4, 1, "", "get_network_transformations"], [4, 4, 1, "", "get_scope_status"], [4, 4, 1, "", "get_scoped_key"], [4, 4, 1, "", "get_task_failures"], [4, 4, 1, "", "get_task_networks"], [4, 4, 1, "", "get_task_results"], [4, 4, 1, "", "get_task_transformation"], [4, 4, 1, "", "get_tasks_status"], [4, 4, 1, "", "get_transformation"], [4, 4, 1, "", "get_transformation_chemicalsystems"], [4, 4, 1, "", "get_transformation_failures"], [4, 4, 1, "", "get_transformation_networks"], [4, 4, 1, "", "get_transformation_results"], [4, 4, 1, "", "get_transformation_status"], [4, 4, 1, "", "get_transformation_tasks"], [4, 4, 1, "", "query_chemicalsystems"], [4, 4, 1, "", "query_networks"], [4, 4, 1, "", "query_tasks"], [4, 4, 1, "", "query_transformations"], [4, 4, 1, "", "set_strategy"], [4, 4, 1, "", "set_tasks_status"]], "alchemiscale.models": [[5, 3, 1, "", "InvalidScopeError"], [5, 1, 1, "", "ScopedKey"]], "alchemiscale.security": [[6, 0, 0, "-", "auth"], [6, 0, 0, "-", "models"]], "alchemiscale.security.auth": [[6, 3, 1, "", "AuthenticationError"]], "alchemiscale.settings": [[7, 1, 1, "", "APISettings"], [7, 1, 1, "", "BaseAPISettings"], [7, 1, 1, "", "ComputeAPISettings"], [7, 1, 1, "", "FrozenSettings"], [7, 1, 1, "", "JWTSettings"], [7, 1, 1, "", "Neo4jStoreSettings"], [7, 1, 1, "", "S3ObjectStoreSettings"]], "alchemiscale.storage": [[8, 0, 0, "-", "models"], [8, 0, 0, "-", "objectstore"], [8, 0, 0, "-", "statestore"]], "alchemiscale.storage.models": [[8, 1, 1, "", "ComputeServiceID"], [8, 1, 1, "", "ComputeServiceRegistration"], [8, 1, 1, "", "ObjectStoreRef"], [8, 1, 1, "", "ProtocolDAGResultRef"], [8, 1, 1, "", "Task"], [8, 1, 1, "", "TaskArchive"], [8, 1, 1, "", "TaskHub"], [8, 1, 1, "", "TaskStatusEnum"]], "alchemiscale.storage.models.Task": [[8, 5, 1, "", "claim"], [8, 5, 1, "", "datetime_created"], [8, 5, 1, "", "priority"], [8, 5, 1, "", "status"]], "alchemiscale.storage.models.TaskHub": [[8, 5, 1, "", "network"], [8, 5, 1, "", "weight"]], "alchemiscale.storage.objectstore": [[8, 1, 1, "", "S3ObjectStore"], [8, 3, 1, "", "S3ObjectStoreError"], [8, 2, 1, "", "get_s3os"]], "alchemiscale.storage.objectstore.S3ObjectStore": [[8, 4, 1, "", "check"], [8, 4, 1, "", "initialize"], [8, 4, 1, "", "iter_contents"], [8, 4, 1, "", "pull_protocoldagresult"], [8, 4, 1, "", "push_protocoldagresult"], [8, 4, 1, "", "reset"]], "alchemiscale.storage.statestore": [[8, 1, 1, "", "AlchemiscaleStateStore"], [8, 3, 1, "", "Neo4JStoreError"], [8, 1, 1, "", "Neo4jStore"], [8, 2, 1, "", "get_n4js"]], "alchemiscale.storage.statestore.Neo4jStore": [[8, 4, 1, "", "action_tasks"], [8, 4, 1, "", "add_scope"], [8, 4, 1, "", "cancel_tasks"], [8, 4, 1, "", "check"], [8, 4, 1, "", "claim_taskhub_tasks"], [8, 4, 1, "", "create_credentialed_entity"], [8, 4, 1, "", "create_network"], [8, 4, 1, "", "create_task"], [8, 4, 1, "", "create_taskhub"], [8, 4, 1, "", "delete_network"], [8, 4, 1, "", "delete_task"], [8, 4, 1, "", "delete_taskhub"], [8, 4, 1, "", "deregister_computeservice"], [8, 4, 1, "", "expire_registrations"], [8, 4, 1, "", "get_chemicalsystem_networks"], [8, 4, 1, "", "get_chemicalsystem_transformations"], [8, 4, 1, "", "get_credentialed_entity"], [8, 4, 1, "", "get_network_chemicalsystems"], [8, 4, 1, "", "get_network_status"], [8, 4, 1, "", "get_network_tasks"], [8, 4, 1, "", "get_network_transformations"], [8, 4, 1, "", "get_scope_status"], [8, 4, 1, "", "get_task_networks"], [8, 4, 1, "", "get_task_status"], [8, 4, 1, "", "get_task_transformation"], [8, 4, 1, "", "get_task_weights"], [8, 4, 1, "", "get_taskhub"], [8, 4, 1, "", "get_taskhub_tasks"], [8, 4, 1, "", "get_taskhub_unclaimed_tasks"], [8, 4, 1, "", "get_transformation_chemicalsystems"], [8, 4, 1, "", "get_transformation_networks"], [8, 4, 1, "", "get_transformation_status"], [8, 4, 1, "", "get_transformation_tasks"], [8, 4, 1, "", "heartbeat_computeservice"], [8, 4, 1, "", "initialize"], [8, 4, 1, "", "list_credentialed_entities"], [8, 4, 1, "", "list_scopes"], [8, 4, 1, "", "query_chemicalsystems"], [8, 4, 1, "", "query_networks"], [8, 4, 1, "", "query_taskhubs"], [8, 4, 1, "", "query_tasks"], [8, 4, 1, "", "query_transformations"], [8, 4, 1, "", "register_computeservice"], [8, 4, 1, "", "remove_credentialed_identity"], [8, 4, 1, "", "remove_scope"], [8, 4, 1, "", "reset"], [8, 4, 1, "", "set_strategy"], [8, 4, 1, "", "set_task_complete"], [8, 4, 1, "", "set_task_deleted"], [8, 4, 1, "", "set_task_error"], [8, 4, 1, "", "set_task_invalid"], [8, 4, 1, "", "set_task_result"], [8, 4, 1, "", "set_task_running"], [8, 4, 1, "", "set_task_status"], [8, 4, 1, "", "set_task_waiting"], [8, 4, 1, "", "set_task_weights"], [8, 4, 1, "", "set_taskhub_weight"], [8, 4, 1, "", "set_tasks"], [8, 4, 1, "", "transaction"]], "alchemiscale.strategies": [[9, 0, 0, "-", "base"]], "alchemiscale.strategies.base": [[9, 1, 1, "", "Strategy"]], "alchemiscale.strategist": [[10, 0, 0, "-", "service"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:method", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "method", "Python method"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": [0, 1, 3, 4, 6], "document": [0, 11], "content": [0, 11], "reusabl": 1, "compon": [1, 6, 8], "servic": [1, 3, 10], "alchemiscal": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "base": [1, 9], "class": [1, 9], "client": [1, 3, 4], "command": 2, "line": 2, "interfac": [2, 4], "cli": 2, "alchemiscalecomputeapi": 3, "comput": 3, "interact": [3, 4], "alchemiscalecomputeservic": 3, "alchemiscaleclientapi": 4, "user": 4, "face": 4, "data": [5, 6, 8], "model": [5, 6, 8], "secur": 6, "auth": 6, "set": 7, "storag": 8, "s3": 8, "object": 8, "objectstor": 8, "node4j": 8, "state": 8, "statestor": 8, "alchem": 9, "strategi": 9, "strategist": 10, "welcom": 11, "": 11, "indic": 11, "tabl": 11, "overview": 12}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Contents:": [[0, null], [11, null]], "Reusable components for API services. \u2014 alchemiscale.base.api": [[1, "reusable-components-for-api-services-alchemiscale-base-api"]], "Base class for API clients \u2014 alchemiscale.base.client": [[1, "base-class-for-api-clients-alchemiscale-base-client"]], "Command line interface \u2014 alchemiscale.cli": [[2, "command-line-interface-alchemiscale-cli"]], "AlchemiscaleComputeAPI \u2014 alchemiscale.compute.api": [[3, "alchemiscalecomputeapi-alchemiscale-compute-api"]], "Client for interacting with compute API. \u2014 alchemiscale.compute.client": [[3, "client-for-interacting-with-compute-api-alchemiscale-compute-client"]], "AlchemiscaleComputeService \u2014 alchemiscale.compute.service": [[3, "alchemiscalecomputeservice-alchemiscale-compute-service"]], "AlchemiscaleClientAPI \u2014 alchemiscale.interface.api": [[4, "alchemiscaleclientapi-alchemiscale-interface-api"]], "Client for interacting with user-facing API. \u2014 alchemiscale.interface.client": [[4, "client-for-interacting-with-user-facing-api-alchemiscale-interface-client"]], "Data models \u2014 alchemiscale.models": [[5, "data-models-alchemiscale-models"]], "Security components for APIs. \u2014 alchemiscale.security.auth": [[6, "security-components-for-apis-alchemiscale-security-auth"]], "Data models for security components \u2014 alchemiscale.security.models": [[6, "data-models-for-security-components-alchemiscale-security-models"]], "Settings \u2014 alchemiscale.settings": [[7, "settings-alchemiscale-settings"]], "Data models for storage components \u2014 alchemiscale.storage.models": [[8, "data-models-for-storage-components-alchemiscale-storage-models"]], "S3 Object storage \u2014 alchemiscale.storage.objectstore": [[8, "s3-object-storage-alchemiscale-storage-objectstore"]], "Node4js state storage \u2014 alchemiscale.storage.statestore": [[8, "node4js-state-storage-alchemiscale-storage-statestore"]], "Alchemical strategy base class. \u2014 alchemiscale.strategies.base": [[9, "alchemical-strategy-base-class-alchemiscale-strategies-base"]], "Strategist service. \u2014 alchemiscale.strategist.service": [[10, "strategist-service-alchemiscale-strategist-service"]], "Welcome to alchemiscale\u2019s documentation!": [[11, "welcome-to-alchemiscale-s-documentation"]], "Indices and tables": [[11, "indices-and-tables"]], "Overview": [[12, "overview"]]}, "indexentries": {"alchemiscalebaseclient (class in alchemiscale.base.client)": [[1, "alchemiscale.base.client.AlchemiscaleBaseClient"]], "alchemiscalebaseclienterror": [[1, "alchemiscale.base.client.AlchemiscaleBaseClientError"]], "alchemiscaleconnectionerror": [[1, "alchemiscale.base.client.AlchemiscaleConnectionError"]], "gziprequest (class in alchemiscale.base.api)": [[1, "alchemiscale.base.api.GzipRequest"]], "querygufehandler (class in alchemiscale.base.api)": [[1, "alchemiscale.base.api.QueryGUFEHandler"]], "alchemiscale.base.api": [[1, "module-alchemiscale.base.api"]], "alchemiscale.base.client": [[1, "module-alchemiscale.base.client"]], "minimize_scope_space() (in module alchemiscale.base.api)": [[1, "alchemiscale.base.api.minimize_scope_space"]], "module": [[1, "module-alchemiscale.base.api"], [1, "module-alchemiscale.base.client"], [2, "module-alchemiscale.cli"], [3, "module-alchemiscale.compute.api"], [3, "module-alchemiscale.compute.client"], [3, "module-alchemiscale.compute.service"], [4, "module-alchemiscale.interface.api"], [4, "module-alchemiscale.interface.client"], [5, "module-alchemiscale.models"], [6, "module-alchemiscale.security.auth"], [6, "module-alchemiscale.security.models"], [7, "module-alchemiscale.settings"], [8, "module-alchemiscale.storage.models"], [8, "module-alchemiscale.storage.objectstore"], [8, "module-alchemiscale.storage.statestore"], [9, "module-alchemiscale.strategies.base"], [10, "module-alchemiscale.strategist.service"]], "validate_scopes() (in module alchemiscale.base.api)": [[1, "alchemiscale.base.api.validate_scopes"]], "validate_scopes_query() (in module alchemiscale.base.api)": [[1, "alchemiscale.base.api.validate_scopes_query"]], "alchemiscale.cli": [[2, "module-alchemiscale.cli"]], "envvar_dictify() (in module alchemiscale.cli)": [[2, "alchemiscale.cli.envvar_dictify"]], "get_settings_from_options() (in module alchemiscale.cli)": [[2, "alchemiscale.cli.get_settings_from_options"]], "alchemiscalecomputeclient (class in alchemiscale.compute.client)": [[3, "alchemiscale.compute.client.AlchemiscaleComputeClient"]], "alchemiscalecomputeclienterror": [[3, "alchemiscale.compute.client.AlchemiscaleComputeClientError"]], "asynchronouscomputeservice (class in alchemiscale.compute.service)": [[3, "alchemiscale.compute.service.AsynchronousComputeService"]], "interruptablesleep (class in alchemiscale.compute.service)": [[3, "alchemiscale.compute.service.InterruptableSleep"]], "sleepinterrupted": [[3, "alchemiscale.compute.service.SleepInterrupted"]], "synchronouscomputeservice (class in alchemiscale.compute.service)": [[3, "alchemiscale.compute.service.SynchronousComputeService"]], "alchemiscale.compute.api": [[3, "module-alchemiscale.compute.api"]], "alchemiscale.compute.client": [[3, "module-alchemiscale.compute.client"]], "alchemiscale.compute.service": [[3, "module-alchemiscale.compute.service"]], "beat() (alchemiscale.compute.service.synchronouscomputeservice method)": [[3, "alchemiscale.compute.service.SynchronousComputeService.beat"]], "claim_taskhub_tasks() (alchemiscale.compute.client.alchemiscalecomputeclient method)": [[3, "alchemiscale.compute.client.AlchemiscaleComputeClient.claim_taskhub_tasks"]], "claim_tasks() (alchemiscale.compute.service.synchronouscomputeservice method)": [[3, "alchemiscale.compute.service.SynchronousComputeService.claim_tasks"]], "execute() (alchemiscale.compute.service.synchronouscomputeservice method)": [[3, "alchemiscale.compute.service.SynchronousComputeService.execute"]], "heartbeat() (alchemiscale.compute.service.synchronouscomputeservice method)": [[3, "alchemiscale.compute.service.SynchronousComputeService.heartbeat"]], "query_taskhubs() (alchemiscale.compute.client.alchemiscalecomputeclient method)": [[3, "alchemiscale.compute.client.AlchemiscaleComputeClient.query_taskhubs"]], "start() (alchemiscale.compute.service.asynchronouscomputeservice method)": [[3, "alchemiscale.compute.service.AsynchronousComputeService.start"]], "start() (alchemiscale.compute.service.synchronouscomputeservice method)": [[3, "alchemiscale.compute.service.SynchronousComputeService.start"]], "task_to_protocoldag() (alchemiscale.compute.service.synchronouscomputeservice method)": [[3, "alchemiscale.compute.service.SynchronousComputeService.task_to_protocoldag"]], "alchemiscaleclient (class in alchemiscale.interface.client)": [[4, "alchemiscale.interface.client.AlchemiscaleClient"]], "alchemiscaleclienterror": [[4, "alchemiscale.interface.client.AlchemiscaleClientError"]], "action_tasks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.action_tasks"]], "alchemiscale.interface.api": [[4, "module-alchemiscale.interface.api"]], "alchemiscale.interface.client": [[4, "module-alchemiscale.interface.client"]], "cancel_tasks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.cancel_tasks"]], "check_exists() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.check_exists"]], "create_network() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.create_network"]], "create_tasks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.create_tasks"]], "get_chemicalsystem() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_chemicalsystem"]], "get_chemicalsystem_networks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_chemicalsystem_networks"]], "get_chemicalsystem_transformations() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_chemicalsystem_transformations"]], "get_network() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_network"]], "get_network_chemicalsystems() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_network_chemicalsystems"]], "get_network_status() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_network_status"]], "get_network_tasks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_network_tasks"]], "get_network_transformations() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_network_transformations"]], "get_scope_status() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_scope_status"]], "get_scoped_key() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_scoped_key"]], "get_task_failures() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_task_failures"]], "get_task_networks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_task_networks"]], "get_task_results() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_task_results"]], "get_task_transformation() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_task_transformation"]], "get_tasks_status() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_tasks_status"]], "get_transformation() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation"]], "get_transformation_chemicalsystems() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation_chemicalsystems"]], "get_transformation_failures() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation_failures"]], "get_transformation_networks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation_networks"]], "get_transformation_results() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation_results"]], "get_transformation_status() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation_status"]], "get_transformation_tasks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.get_transformation_tasks"]], "query_chemicalsystems() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.query_chemicalsystems"]], "query_networks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.query_networks"]], "query_tasks() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.query_tasks"]], "query_transformations() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.query_transformations"]], "set_strategy() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.set_strategy"]], "set_tasks_status() (alchemiscale.interface.client.alchemiscaleclient method)": [[4, "alchemiscale.interface.client.AlchemiscaleClient.set_tasks_status"]], "invalidscopeerror": [[5, "alchemiscale.models.InvalidScopeError"]], "scopedkey (class in alchemiscale.models)": [[5, "alchemiscale.models.ScopedKey"]], "alchemiscale.models": [[5, "module-alchemiscale.models"]], "authenticationerror": [[6, "alchemiscale.security.auth.AuthenticationError"]], "alchemiscale.security.auth": [[6, "module-alchemiscale.security.auth"]], "alchemiscale.security.models": [[6, "module-alchemiscale.security.models"]], "apisettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.APISettings"]], "baseapisettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.BaseAPISettings"]], "computeapisettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.ComputeAPISettings"]], "frozensettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.FrozenSettings"]], "jwtsettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.JWTSettings"]], "neo4jstoresettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.Neo4jStoreSettings"]], "s3objectstoresettings (class in alchemiscale.settings)": [[7, "alchemiscale.settings.S3ObjectStoreSettings"]], "alchemiscale.settings": [[7, "module-alchemiscale.settings"]], "alchemiscalestatestore (class in alchemiscale.storage.statestore)": [[8, "alchemiscale.storage.statestore.AlchemiscaleStateStore"]], "computeserviceid (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.ComputeServiceID"]], "computeserviceregistration (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.ComputeServiceRegistration"]], "neo4jstoreerror": [[8, "alchemiscale.storage.statestore.Neo4JStoreError"]], "neo4jstore (class in alchemiscale.storage.statestore)": [[8, "alchemiscale.storage.statestore.Neo4jStore"]], "objectstoreref (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.ObjectStoreRef"]], "protocoldagresultref (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.ProtocolDAGResultRef"]], "s3objectstore (class in alchemiscale.storage.objectstore)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore"]], "s3objectstoreerror": [[8, "alchemiscale.storage.objectstore.S3ObjectStoreError"]], "task (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.Task"]], "taskarchive (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.TaskArchive"]], "taskhub (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.TaskHub"]], "taskstatusenum (class in alchemiscale.storage.models)": [[8, "alchemiscale.storage.models.TaskStatusEnum"]], "action_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.action_tasks"]], "add_scope() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.add_scope"]], "alchemiscale.storage.models": [[8, "module-alchemiscale.storage.models"]], "alchemiscale.storage.objectstore": [[8, "module-alchemiscale.storage.objectstore"]], "alchemiscale.storage.statestore": [[8, "module-alchemiscale.storage.statestore"]], "cancel_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.cancel_tasks"]], "check() (alchemiscale.storage.objectstore.s3objectstore method)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore.check"]], "check() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.check"]], "claim (alchemiscale.storage.models.task attribute)": [[8, "alchemiscale.storage.models.Task.claim"]], "claim_taskhub_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.claim_taskhub_tasks"]], "create_credentialed_entity() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.create_credentialed_entity"]], "create_network() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.create_network"]], "create_task() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.create_task"]], "create_taskhub() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.create_taskhub"]], "datetime_created (alchemiscale.storage.models.task attribute)": [[8, "alchemiscale.storage.models.Task.datetime_created"]], "delete_network() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.delete_network"]], "delete_task() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.delete_task"]], "delete_taskhub() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.delete_taskhub"]], "deregister_computeservice() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.deregister_computeservice"]], "expire_registrations() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.expire_registrations"]], "get_chemicalsystem_networks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_chemicalsystem_networks"]], "get_chemicalsystem_transformations() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_chemicalsystem_transformations"]], "get_credentialed_entity() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_credentialed_entity"]], "get_n4js() (in module alchemiscale.storage.statestore)": [[8, "alchemiscale.storage.statestore.get_n4js"]], "get_network_chemicalsystems() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_network_chemicalsystems"]], "get_network_status() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_network_status"]], "get_network_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_network_tasks"]], "get_network_transformations() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_network_transformations"]], "get_s3os() (in module alchemiscale.storage.objectstore)": [[8, "alchemiscale.storage.objectstore.get_s3os"]], "get_scope_status() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_scope_status"]], "get_task_networks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_task_networks"]], "get_task_status() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_task_status"]], "get_task_transformation() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_task_transformation"]], "get_task_weights() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_task_weights"]], "get_taskhub() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_taskhub"]], "get_taskhub_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_taskhub_tasks"]], "get_taskhub_unclaimed_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_taskhub_unclaimed_tasks"]], "get_transformation_chemicalsystems() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_transformation_chemicalsystems"]], "get_transformation_networks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_transformation_networks"]], "get_transformation_status() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_transformation_status"]], "get_transformation_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.get_transformation_tasks"]], "heartbeat_computeservice() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.heartbeat_computeservice"]], "initialize() (alchemiscale.storage.objectstore.s3objectstore method)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore.initialize"]], "initialize() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.initialize"]], "iter_contents() (alchemiscale.storage.objectstore.s3objectstore method)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore.iter_contents"]], "list_credentialed_entities() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.list_credentialed_entities"]], "list_scopes() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.list_scopes"]], "network (alchemiscale.storage.models.taskhub attribute)": [[8, "alchemiscale.storage.models.TaskHub.network"]], "priority (alchemiscale.storage.models.task attribute)": [[8, "alchemiscale.storage.models.Task.priority"]], "pull_protocoldagresult() (alchemiscale.storage.objectstore.s3objectstore method)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore.pull_protocoldagresult"]], "push_protocoldagresult() (alchemiscale.storage.objectstore.s3objectstore method)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore.push_protocoldagresult"]], "query_chemicalsystems() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.query_chemicalsystems"]], "query_networks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.query_networks"]], "query_taskhubs() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.query_taskhubs"]], "query_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.query_tasks"]], "query_transformations() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.query_transformations"]], "register_computeservice() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.register_computeservice"]], "remove_credentialed_identity() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.remove_credentialed_identity"]], "remove_scope() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.remove_scope"]], "reset() (alchemiscale.storage.objectstore.s3objectstore method)": [[8, "alchemiscale.storage.objectstore.S3ObjectStore.reset"]], "reset() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.reset"]], "set_strategy() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_strategy"]], "set_task_complete() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_complete"]], "set_task_deleted() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_deleted"]], "set_task_error() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_error"]], "set_task_invalid() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_invalid"]], "set_task_result() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_result"]], "set_task_running() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_running"]], "set_task_status() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_status"]], "set_task_waiting() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_waiting"]], "set_task_weights() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_task_weights"]], "set_taskhub_weight() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_taskhub_weight"]], "set_tasks() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.set_tasks"]], "status (alchemiscale.storage.models.task attribute)": [[8, "alchemiscale.storage.models.Task.status"]], "transaction() (alchemiscale.storage.statestore.neo4jstore method)": [[8, "alchemiscale.storage.statestore.Neo4jStore.transaction"]], "weight (alchemiscale.storage.models.taskhub attribute)": [[8, "alchemiscale.storage.models.TaskHub.weight"]], "strategy (class in alchemiscale.strategies.base)": [[9, "alchemiscale.strategies.base.Strategy"]], "alchemiscale.strategies.base": [[9, "module-alchemiscale.strategies.base"]], "alchemiscale.strategist.service": [[10, "module-alchemiscale.strategist.service"]]}})